
[
  {
    "sha": "43982f5fb502f28fc592e9641e79067247312aac",
    "filename": "step-templates/windows-scheduled-task-changepath.json",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/OctopusDeploy/Library/blob/e649515f4913ee690ed1657acde6c7c310f3c54a/step-templates/windows-scheduled-task-changepath.json",
    "raw_url": "https://github.com/OctopusDeploy/Library/raw/e649515f4913ee690ed1657acde6c7c310f3c54a/step-templates/windows-scheduled-task-changepath.json",
    "contents_url": "https://api.github.com/repos/OctopusDeploy/Library/contents/step-templates/windows-scheduled-task-changepath.json?ref=e649515f4913ee690ed1657acde6c7c310f3c54a",
    "patch": "@@ -3,9 +3,9 @@\n   \"Name\": \"Windows Scheduled Task - Change Path\",\n   \"Description\": \"Changes the execution path of a Windows Scheduled Task for both 2008 and 2012.\",\n   \"ActionType\": \"Octopus.Script\",\n-  \"Version\": 1,\n+  \"Version\": 2,\n   \"Properties\": {\n-    \"Octopus.Action.Script.ScriptBody\": \"$taskName   = $OctopusParameters['TaskName']\\r$taskFolder = $OctopusParameters['TaskFolder']\\r$taskExe    = $OctopusParameters['TaskExe']\\r$userName   = $OctopusParameters['TaskUserName']\\r$password   = $OctopusParameters['TaskPassword']\\r\\r$taskPath = Join-Path $taskFolder $taskExe\\rWrite-Output \\\"Changing execution path of $taskName to $taskPath\\\"\\r\\r#Check if 2008 Server\\rif ((Get-WmiObject Win32_OperatingSystem).Name.Contains(\\\"2008\\\"))\\r{\\r    schtasks /Change /RU $userName /RP $password /TR $taskPath /TN $taskName\\r}\\relse\\r{\\r    Set-ScheduledTask -TaskName $taskName -TaskPath $taskPath -User $userName -Password $password;\\r}\",\n+    \"Octopus.Action.Script.ScriptBody\": \"$taskName   = $OctopusParameters['TaskName']\\r$taskFolder = $OctopusParameters['TaskFolder']\\r$taskExe    = $OctopusParameters['TaskExe']\\r$userName   = $OctopusParameters['TaskUserName']\\r$password   = $OctopusParameters['TaskPassword']\\r\\r$taskPath = Join-Path $taskFolder $taskExe\\rWrite-Output \\\"Changing execution path of $taskName to $taskPath\\\"\\r\\r$userName = \\\"`\\\"$userName`\\\"\\\"\\r\\r#Check if 2008 Server\\rif ((Get-WmiObject Win32_OperatingSystem).Name.Contains(\\\"2008\\\"))\\r{\\r    schtasks /Change /RU $userName /RP $password /TR $taskPath /TN $taskName\\r}\\relse\\r{\\r    Set-ScheduledTask -TaskName $taskName -TaskPath $taskPath -User $userName -Password $password;\\r}\",\n     \"Octopus.Action.Script.Syntax\": \"PowerShell\"\n   },\n   \"SensitiveProperties\": {},\n@@ -50,12 +50,12 @@\n       \"DisplaySettings\": {}\n     }\n   ],\n-  \"LastModifiedOn\": \"2014-12-10T17:59:38.186+00:00\",\n-  \"LastModifiedBy\": \"atbez\",\n+  \"LastModifiedOn\": \"2019-09-26T18:19:00.000+00:00\",\n+  \"LastModifiedBy\": \"hayer\",\n   \"$Meta\": {\n     \"ExportedAt\": \"2014-12-10T18:00:42.218+00:00\",\n     \"OctopusVersion\": \"2.5.12.666\",\n     \"Type\": \"ActionTemplate\"\n   },\n   \"Category\": \"windows\"\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "4164766c3627047f94604525705f23c034e9a5fe",
    "filename": "step-templates/windows-scheduled-task-create.json",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/OctopusDeploy/Library/blob/e649515f4913ee690ed1657acde6c7c310f3c54a/step-templates/windows-scheduled-task-create.json",
    "raw_url": "https://github.com/OctopusDeploy/Library/raw/e649515f4913ee690ed1657acde6c7c310f3c54a/step-templates/windows-scheduled-task-create.json",
    "contents_url": "https://api.github.com/repos/OctopusDeploy/Library/contents/step-templates/windows-scheduled-task-create.json?ref=e649515f4913ee690ed1657acde6c7c310f3c54a",
    "patch": "@@ -3,9 +3,9 @@\n   \"Name\": \"Windows Scheduled Task - Create\",\n   \"Description\": \"Create Windows scheduled task. If the task exists it will be torn down and re-added to ensure consistency\",\n   \"ActionType\": \"Octopus.Script\",\n-  \"Version\": 18,\n+  \"Version\": 19,\n   \"Properties\": {\n-    \"Octopus.Action.Script.ScriptBody\": \"$ErrorActionPreference = \\\"Stop\\\";\\nSet-StrictMode -Version \\\"Latest\\\";\\n\\n# use http://msdn.microsoft.com/en-us/library/windows/desktop/bb736357(v=vs.85).aspx for API reference\\n\\nFunction Create-ScheduledTask($TaskName,$RunAsUser,$RunAsPassword,$TaskRun,$Arguments,$Schedule,$StartTime,$StartDate,$RunWithElevatedPermissions,$Days,$Interval,$Duration, $Modifier)\\n{\\n\\n    # SCHTASKS /Create [/S system [/U username [/P [password]]]]\\n    #     [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]\\n    #     [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]\\n    #     [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]\\n    #     [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]\\n\\n    # note - /RL and /DELAY appear in the \\\"Parameter list\\\" for \\\"SCHTASKS /Create /?\\\" but not in the syntax above\\n\\n    $argumentList = @();\\n    $argumentList += @( \\\"/Create\\\" );\\n\\n    $argumentList += @( \\\"/RU\\\", $RunAsUser );\\n\\n    if( -not (StringIsNullOrWhiteSpace($RunAsPassword)))\\n    {\\n        $argumentList += @( \\\"/RP\\\", $RunAsPassword );\\n    }\\n\\n    $argumentList += @( \\\"/SC\\\", $Schedule );\\n\\n    if( -not (StringIsNullOrWhiteSpace($Interval)) )\\n    {\\n\\t\\t$argumentList += @( \\\"/RI\\\", $Interval );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($Modifier)))\\n\\t{\\n        switch -Regex ($Schedule)\\n        {\\n            \\\"MINUTE|HOURLY|DAILY|WEEKLY|MONTHLY|ONEVENT\\\" {\\n                $argumentList += @( \\\"/MO\\\", $Modifier );\\n            }\\n            \\\"ONCE|ONSTART|ONLOGON|ONIDLE\\\" {\\n                $argumentList += @( \\\"/MO\\\" );\\n            }\\n        }\\n\\t}\\n\\n    if( -not (StringIsNullOrWhiteSpace($Days)))\\n    {\\n        if ($Schedule -ne \\\"WEEKDAYS\\\"){\\n\\t\\t\\t$argumentList += @( \\\"/D\\\", $Days );\\n        } else {\\n            $argumentList += @( \\\"/D\\\", \\\"MON,TUE,WED,THU,FRI\\\" );\\n        }\\n    }\\n\\n    $argumentList += @( \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n\\n    if( $Arguments )\\n    {\\n        $argumentList += @( \\\"/TR\\\", \\\"`\\\"'$TaskRun' $Arguments`\\\"\\\" );\\n    }\\n    else\\n    {\\n        $argumentList += @( \\\"/TR\\\", \\\"`\\\"'$TaskRun'`\\\"\\\" );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($StartTime)) )\\n    {\\n        $argumentList += @( \\\"/ST\\\", $StartTime );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($Duration)) )\\n    {\\n        $argumentList += @( \\\"/DU\\\", $Duration );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($StartDate)) )\\n    {\\n        $argumentList += @( \\\"/SD\\\", $StartDate );\\n    }\\n\\n    $argumentList += @( \\\"/F\\\" );\\n\\n    if( $RunWithElevatedPermissions )\\n    {\\n        $argumentList += @( \\\"/RL\\\", \\\"HIGHEST\\\" );\\n    }\\n\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList $argumentList;\\n\\n}\\n\\nFunction Delete-ScheduledTask($TaskName) {\\n    # SCHTASKS /Delete [/S system [/U username [/P [password]]]]\\n    #          /TN taskname [/F] [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Delete\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\", \\\"/F\\\" );\\n}\\n\\nFunction Stop-ScheduledTask($TaskName) {\\n    # SCHTASKS /End [/S system [/U username [/P [password]]]]\\n    #          /TN taskname [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/End\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n}\\n\\nFunction Start-ScheduledTask($TaskName) {\\n    # SCHTASKS /Run [/S system [/U username [/P [password]]]] [/I]\\n    #          /TN taskname [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Run\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n}\\n\\nFunction Enable-ScheduledTask($TaskName) {\\n    # SCHTASKS /Change [/S system [/U username [/P [password]]]] /TN taskname\\n    #      { [/RU runasuser] [/RP runaspassword] [/TR taskrun] [/ST starttime]\\n    #        [/RI interval] [ {/ET endtime | /DU duration} [/K] ]\\n    #        [/SD startdate] [/ED enddate] [/ENABLE | /DISABLE] [/IT] [/Z] }\\n    #        [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Change\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\", \\\"/ENABLE\\\" );\\n}\\n\\nFunction ScheduledTask-Exists($taskName) {\\n   $schedule = new-object -com Schedule.Service\\n   $schedule.connect()\\n   $tasks = $schedule.getfolder(\\\"\\\\\\\").gettasks(0)\\n   foreach ($task in ($tasks | select Name)) {\\n      #echo \\\"TASK: $($task.name)\\\"\\n      if($task.Name -eq $taskName) {\\n         #write-output \\\"$task already exists\\\"\\n         return $true\\n      }\\n   }\\n   return $false\\n}\\n\\nFunction StringIsNullOrWhitespace([string] $string)\\n{\\n    if ($string -ne $null) { $string = $string.Trim() }\\n    return [string]::IsNullOrEmpty($string)\\n}\\n\\nfunction Invoke-CommandLine\\n{\\n    param\\n    (\\n        [Parameter(Mandatory=$true)]\\n        [string] $FilePath,\\n        [Parameter(Mandatory=$false)]\\n        [string[]] $ArgumentList = @( ),\\n        [Parameter(Mandatory=$false)]\\n        [string[]] $SuccessCodes = @( 0 )\\n    )\\n    write-host ($FilePath + \\\" \\\" + ($ArgumentList -join \\\" \\\"));\\n    $process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -Wait -NoNewWindow -PassThru;\\n    if( $SuccessCodes -notcontains $process.ExitCode )\\n    {\\n        throw new-object System.InvalidOperationException(\\\"process terminated with exit code '$($process.ExitCode)'.\\\");\\n    }\\n}\\n\\nfunction Invoke-OctopusStep\\n{\\n    param\\n    (\\n        [Parameter(Mandatory=$true)]\\n        [hashtable] $OctopusParameters\\n    )\\n\\n    $taskName = $OctopusParameters['TaskName']\\n    $runAsUser = $OctopusParameters['RunAsUser']\\n    $runAsPassword = $OctopusParameters['RunAsPassword']\\n    $command = $OctopusParameters['Command']\\n    $arguments = $OctopusParameters['Arguments']\\n    $schedule = $OctopusParameters['Schedule']\\n    $startTime = $OctopusParameters['StartTime']\\n    $startDate = $OctopusParameters['StartDate']\\n\\n    if( $OctopusParameters.ContainsKey(\\\"RunWithElevatedPermissions\\\") )\\n    {\\n        $runWithElevatedPermissions = [boolean]::Parse($OctopusParameters['RunWithElevatedPermissions'])\\n    }\\n    else\\n    {\\n        $runWithElevatedPermissions = $false;\\n    }\\n\\n    $days = $OctopusParameters['Days']\\n    $interval = $OctopusParameters['Interval']\\n    $duration = $OctopusParameters['Duration']\\n    $Modifier = $OctopusParameters['Modifier']\\n\\n    if((ScheduledTask-Exists($taskName))){\\n        Write-Output \\\"$taskName already exists, Tearing down...\\\"\\n        Write-Output \\\"Stopping $taskName...\\\"\\n        Stop-ScheduledTask($taskName)\\n        Write-Output \\\"Successfully Stopped $taskName\\\"\\n        Write-Output \\\"Deleting $taskName...\\\"\\n        Delete-ScheduledTask($taskName)\\n        Write-Output \\\"Successfully Deleted $taskName\\\"\\n    }\\n    Write-Output \\\"Creating Scheduled Task - $taskName\\\"\\n\\n    Create-ScheduledTask $taskName $runAsUser $runAsPassword $command $arguments $schedule $startTime $startDate $runWithElevatedPermissions $days $interval $duration $Modifier\\n    Write-Output \\\"Successfully Created $taskName\\\"\\n    Enable-ScheduledTask($taskName)\\n    Write-Output \\\"$taskName enabled\\\"\\n\\n    if( $OctopusParameters.ContainsKey(\\\"StartNewTaskNow\\\") )\\n    {\\n        $startNewTaskNow = [boolean]::Parse($OctopusParameters['StartNewTaskNow'])\\n    }\\n    else\\n    {\\n        $startNewTaskNow = $false;\\n    }\\n\\n    if( $startNewTaskNow ) {\\n      Start-ScheduledTask($taskName)\\n    }\\n}\\n\\n\\n# only execute the step if it's called from octopus deploy,\\n# and skip it if we're runnning inside a Pester test\\nif( Test-Path -Path \\\"Variable:OctopusParameters\\\" )\\n{\\n    Invoke-OctopusStep -OctopusParameters $OctopusParameters;\\n}\\n\",\n+    \"Octopus.Action.Script.ScriptBody\": \"$ErrorActionPreference = \\\"Stop\\\";\\nSet-StrictMode -Version \\\"Latest\\\";\\n\\n# use http://msdn.microsoft.com/en-us/library/windows/desktop/bb736357(v=vs.85).aspx for API reference\\n\\nFunction Create-ScheduledTask($TaskName,$RunAsUser,$RunAsPassword,$TaskRun,$Arguments,$Schedule,$StartTime,$StartDate,$RunWithElevatedPermissions,$Days,$Interval,$Duration, $Modifier)\\n{\\n\\n    # SCHTASKS /Create [/S system [/U username [/P [password]]]]\\n    #     [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]\\n    #     [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]\\n    #     [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]\\n    #     [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]\\n\\n    # note - /RL and /DELAY appear in the \\\"Parameter list\\\" for \\\"SCHTASKS /Create /?\\\" but not in the syntax above\\n\\n    $argumentList = @();\\n    $argumentList += @( \\\"/Create\\\" );\\n\\n    $argumentList += @( \\\"/RU\\\", \\\"`\\\"$RunAsUser`\\\"\\\" );\\n\\n    if( -not (StringIsNullOrWhiteSpace($RunAsPassword)))\\n    {\\n        $argumentList += @( \\\"/RP\\\", $RunAsPassword );\\n    }\\n\\n    $argumentList += @( \\\"/SC\\\", $Schedule );\\n\\n    if( -not (StringIsNullOrWhiteSpace($Interval)) )\\n    {\\n\\t\\t$argumentList += @( \\\"/RI\\\", $Interval );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($Modifier)))\\n\\t{\\n        switch -Regex ($Schedule)\\n        {\\n            \\\"MINUTE|HOURLY|DAILY|WEEKLY|MONTHLY|ONEVENT\\\" {\\n                $argumentList += @( \\\"/MO\\\", $Modifier );\\n            }\\n            \\\"ONCE|ONSTART|ONLOGON|ONIDLE\\\" {\\n                $argumentList += @( \\\"/MO\\\" );\\n            }\\n        }\\n\\t}\\n\\n    if( -not (StringIsNullOrWhiteSpace($Days)))\\n    {\\n        if ($Schedule -ne \\\"WEEKDAYS\\\"){\\n\\t\\t\\t$argumentList += @( \\\"/D\\\", $Days );\\n        } else {\\n            $argumentList += @( \\\"/D\\\", \\\"MON,TUE,WED,THU,FRI\\\" );\\n        }\\n    }\\n\\n    $argumentList += @( \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n\\n    if( $Arguments )\\n    {\\n        $argumentList += @( \\\"/TR\\\", \\\"`\\\"'$TaskRun' $Arguments`\\\"\\\" );\\n    }\\n    else\\n    {\\n        $argumentList += @( \\\"/TR\\\", \\\"`\\\"'$TaskRun'`\\\"\\\" );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($StartTime)) )\\n    {\\n        $argumentList += @( \\\"/ST\\\", $StartTime );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($Duration)) )\\n    {\\n        $argumentList += @( \\\"/DU\\\", $Duration );\\n    }\\n\\n    if( -not (StringIsNullOrWhiteSpace($StartDate)) )\\n    {\\n        $argumentList += @( \\\"/SD\\\", $StartDate );\\n    }\\n\\n    $argumentList += @( \\\"/F\\\" );\\n\\n    if( $RunWithElevatedPermissions )\\n    {\\n        $argumentList += @( \\\"/RL\\\", \\\"HIGHEST\\\" );\\n    }\\n\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList $argumentList;\\n\\n}\\n\\nFunction Delete-ScheduledTask($TaskName) {\\n    # SCHTASKS /Delete [/S system [/U username [/P [password]]]]\\n    #          /TN taskname [/F] [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Delete\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\", \\\"/F\\\" );\\n}\\n\\nFunction Stop-ScheduledTask($TaskName) {\\n    # SCHTASKS /End [/S system [/U username [/P [password]]]]\\n    #          /TN taskname [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/End\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n}\\n\\nFunction Start-ScheduledTask($TaskName) {\\n    # SCHTASKS /Run [/S system [/U username [/P [password]]]] [/I]\\n    #          /TN taskname [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Run\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\" );\\n}\\n\\nFunction Enable-ScheduledTask($TaskName) {\\n    # SCHTASKS /Change [/S system [/U username [/P [password]]]] /TN taskname\\n    #      { [/RU runasuser] [/RP runaspassword] [/TR taskrun] [/ST starttime]\\n    #        [/RI interval] [ {/ET endtime | /DU duration} [/K] ]\\n    #        [/SD startdate] [/ED enddate] [/ENABLE | /DISABLE] [/IT] [/Z] }\\n    #        [/HRESULT] [/?]\\n    Invoke-CommandLine -FilePath     \\\"$($env:SystemRoot)\\\\System32\\\\schtasks.exe\\\" `\\n                       -ArgumentList @( \\\"/Change\\\", \\\"/S\\\", \\\"localhost\\\", \\\"/TN\\\", \\\"`\\\"$TaskName`\\\"\\\", \\\"/ENABLE\\\" );\\n}\\n\\nFunction ScheduledTask-Exists($taskName) {\\n   $schedule = new-object -com Schedule.Service\\n   $schedule.connect()\\n   $tasks = $schedule.getfolder(\\\"\\\\\\\").gettasks(0)\\n   foreach ($task in ($tasks | select Name)) {\\n      #echo \\\"TASK: $($task.name)\\\"\\n      if($task.Name -eq $taskName) {\\n         #write-output \\\"$task already exists\\\"\\n         return $true\\n      }\\n   }\\n   return $false\\n}\\n\\nFunction StringIsNullOrWhitespace([string] $string)\\n{\\n    if ($string -ne $null) { $string = $string.Trim() }\\n    return [string]::IsNullOrEmpty($string)\\n}\\n\\nfunction Invoke-CommandLine\\n{\\n    param\\n    (\\n        [Parameter(Mandatory=$true)]\\n        [string] $FilePath,\\n        [Parameter(Mandatory=$false)]\\n        [string[]] $ArgumentList = @( ),\\n        [Parameter(Mandatory=$false)]\\n        [string[]] $SuccessCodes = @( 0 )\\n    )\\n    write-host ($FilePath + \\\" \\\" + ($ArgumentList -join \\\" \\\"));\\n    $process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -Wait -NoNewWindow -PassThru;\\n    if( $SuccessCodes -notcontains $process.ExitCode )\\n    {\\n        throw new-object System.InvalidOperationException(\\\"process terminated with exit code '$($process.ExitCode)'.\\\");\\n    }\\n}\\n\\nfunction Invoke-OctopusStep\\n{\\n    param\\n    (\\n        [Parameter(Mandatory=$true)]\\n        [hashtable] $OctopusParameters\\n    )\\n\\n    $taskName = $OctopusParameters['TaskName']\\n    $runAsUser = $OctopusParameters['RunAsUser']\\n    $runAsPassword = $OctopusParameters['RunAsPassword']\\n    $command = $OctopusParameters['Command']\\n    $arguments = $OctopusParameters['Arguments']\\n    $schedule = $OctopusParameters['Schedule']\\n    $startTime = $OctopusParameters['StartTime']\\n    $startDate = $OctopusParameters['StartDate']\\n\\n    if( $OctopusParameters.ContainsKey(\\\"RunWithElevatedPermissions\\\") )\\n    {\\n        $runWithElevatedPermissions = [boolean]::Parse($OctopusParameters['RunWithElevatedPermissions'])\\n    }\\n    else\\n    {\\n        $runWithElevatedPermissions = $false;\\n    }\\n\\n    $days = $OctopusParameters['Days']\\n    $interval = $OctopusParameters['Interval']\\n    $duration = $OctopusParameters['Duration']\\n    $Modifier = $OctopusParameters['Modifier']\\n\\n    if((ScheduledTask-Exists($taskName))){\\n        Write-Output \\\"$taskName already exists, Tearing down...\\\"\\n        Write-Output \\\"Stopping $taskName...\\\"\\n        Stop-ScheduledTask($taskName)\\n        Write-Output \\\"Successfully Stopped $taskName\\\"\\n        Write-Output \\\"Deleting $taskName...\\\"\\n        Delete-ScheduledTask($taskName)\\n        Write-Output \\\"Successfully Deleted $taskName\\\"\\n    }\\n    Write-Output \\\"Creating Scheduled Task - $taskName\\\"\\n\\n    Create-ScheduledTask $taskName $runAsUser $runAsPassword $command $arguments $schedule $startTime $startDate $runWithElevatedPermissions $days $interval $duration $Modifier\\n    Write-Output \\\"Successfully Created $taskName\\\"\\n    Enable-ScheduledTask($taskName)\\n    Write-Output \\\"$taskName enabled\\\"\\n\\n    if( $OctopusParameters.ContainsKey(\\\"StartNewTaskNow\\\") )\\n    {\\n        $startNewTaskNow = [boolean]::Parse($OctopusParameters['StartNewTaskNow'])\\n    }\\n    else\\n    {\\n        $startNewTaskNow = $false;\\n    }\\n\\n    if( $startNewTaskNow ) {\\n      Start-ScheduledTask($taskName)\\n    }\\n}\\n\\n\\n# only execute the step if it's called from octopus deploy,\\n# and skip it if we're runnning inside a Pester test\\nif( Test-Path -Path \\\"Variable:OctopusParameters\\\" )\\n{\\n    Invoke-OctopusStep -OctopusParameters $OctopusParameters;\\n}\\n\",\n     \"Octopus.Action.Script.Syntax\": \"PowerShell\",\n     \"Octopus.Action.Script.ScriptSource\": \"Inline\",\n     \"Octopus.Action.Script.ScriptFileName\": \"\",\n@@ -134,7 +134,8 @@\n       }\n     }\n   ],\n-  \"LastModifiedBy\": \"bennett-elder\",\n+  \"LastModifiedOn\": \"2019-09-26T18:19:00.000+00:00\",\n+  \"LastModifiedBy\": \"hayer\",\n   \"$Meta\": {\n     \"ExportedAt\": \"2018-06-08T16:10:46.000Z\",\n     \"OctopusVersion\": \"3.3.27\","
  }
]
