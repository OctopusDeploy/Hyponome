[
  {
    "sha": "c585b490504592fe5ccb9b011012f491a074eebd",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/OctopusDeploy/Library/blob/f4f621aa4b37d64c9cc3bebbdb45de7d22833556/.gitignore",
    "raw_url": "https://github.com/OctopusDeploy/Library/raw/f4f621aa4b37d64c9cc3bebbdb45de7d22833556/.gitignore",
    "contents_url": "https://api.github.com/repos/OctopusDeploy/Library/contents/.gitignore?ref=f4f621aa4b37d64c9cc3bebbdb45de7d22833556",
    "patch": "@@ -9,4 +9,5 @@ scriptcs_packages/\n scriptcs_packages.config\n \n step-templates/*.ps1\n-step-templates/*.sh\n\\ No newline at end of file\n+step-templates/*.sh\n+/.vs"
  },
  {
    "sha": "67890b440b3bac24ba3d11df9c83ffaa6b0dfb2c",
    "filename": "step-templates/ssis-deploy-ispac-with-enviroment.json",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/OctopusDeploy/Library/blob/f4f621aa4b37d64c9cc3bebbdb45de7d22833556/step-templates/ssis-deploy-ispac-with-enviroment.json",
    "raw_url": "https://github.com/OctopusDeploy/Library/raw/f4f621aa4b37d64c9cc3bebbdb45de7d22833556/step-templates/ssis-deploy-ispac-with-enviroment.json",
    "contents_url": "https://api.github.com/repos/OctopusDeploy/Library/contents/step-templates/ssis-deploy-ispac-with-enviroment.json?ref=f4f621aa4b37d64c9cc3bebbdb45de7d22833556",
    "patch": "@@ -0,0 +1,73 @@\n+{\n+  \"Id\": \"b791c0c2-03ce-40ef-9446-78beb585c0b8\",\n+  \"Name\": \"SSIS deploy ISPAC With Enviroment\",\n+  \"Description\": \"Deploy SSIS ISPACs to the SQL Server creating a Enviroment configuration suffix with with the target deployment enviroment\",\n+  \"ActionType\": \"Octopus.Script\",\n+  \"Version\": 17,\n+  \"CommunityActionTemplateId\": null,\n+  \"Packages\": [],\n+  \"Properties\": {\n+    \"Octopus.Action.Script.ScriptSource\": \"Inline\",\n+    \"Octopus.Action.Script.Syntax\": \"PowerShell\",\n+    \"Octopus.Action.Script.ScriptBody\": \"# Define PowerShell Modules path\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\n#region Functions\\n\\n#region SQLPS functions \\nfunction Get-NugetPackageProviderNotInstalled {\\n    # See if the nuget package provider has been installed\\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\\n}\\n\\nfunction Get-SqlModuleInstalled {\\n    # Define parameters\\n    param(\\n        $PowerShellModuleName\\n    )\\n\\n    # Check to see if the module is installed\\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName)) {\\n        # It is installed\\n        return $true\\n    }\\n    else {\\n        # Module not installed\\n        return $false\\n    }\\n}\\n\\nfunction Install-SqlServerPowerShellModule {\\n    # Define parameters\\n    param(\\n        $PowerShellModuleName,\\n        $LocalModulesPath\\n    )\\n\\n    # Check to see if the package provider has been installed\\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false) {\\n        # Display that we need the nuget package provider\\n        Write-Host \\\"Nuget package provider not found, installing ...\\\"\\n        \\n        # Install Nuget package provider\\n        Install-PackageProvider -Name Nuget -Force\\n    }\\n\\n    # Save the module in the temporary location\\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\\n\\n    # Display\\n    Write-Output \\\"Importing module $PowerShellModuleName ...\\\"\\n\\n    # Import the module\\n    Import-Module -Name $PowerShellModuleName\\n}\\n\\nFunction Get-SqlServerAssmblies {\\n    # Declare parameters\\n    \\n    # Get the folder where the SqlServer module ended up in\\n    $sqlServerModulePath = [System.IO.Path]::GetDirectoryName((Get-Module SqlServer).Path)\\n    \\n    # Loop through the assemblies\\n    foreach ($assemblyFile in (Get-ChildItem -Path $sqlServerModulePath -Exclude msv*.dll | Where-Object { $_.Extension -eq \\\".dll\\\" })) {\\n        # Load the assembly\\n        [Reflection.Assembly]::LoadFile($assemblyFile.FullName) | Out-Null\\n    }    \\n}\\n\\n#endregion SQLPS functions \\n\\n#region SQL Server functions \\nfunction Get-ConnectionObject {\\n    param\\n    (\\n        [parameter(ParameterSetName = 'Default', HelpMessage = 'Name of the server', Mandatory = $true)]\\n        [parameter(ParameterSetName = 'SQLAuth', HelpMessage = 'Name of the server', Mandatory = $true)]\\n        [string]\\n        $SQLServerName,\\n        [parameter(ParameterSetName = 'SQLAuth')]\\n        [switch] $UseSQLAuth,\\n        [parameter(ParameterSetName = 'SQLAuth', HelpMessage = 'SQL Server Login', Mandatory = $true)]\\n        [string] $SQLLogin,\\n        [parameter(ParameterSetName = 'SQLAuth', HelpMessage = 'SQL Server Password', Mandatory = $true)]\\n        [string] $Password\\n          \\n    ) \\n    # Create a connection to the server\\n    $sqlConnectionString = \\\"Data Source=$ServerName;Initial Catalog=SSISDB;\\\"\\n    \\n    if ($UseSQLAuth) {\\n        # Add username and password to connection string\\n        $sqlConnectionString += \\\"User ID=$SQLLogin; Password=$Password;\\\"\\n    }\\n    else {\\n        # Use integrated\\n        $sqlConnectionString += \\\"Integrated Security=SSPI;\\\"\\n    }\\n     \\n    # Create new connection object with connection string\\n    return (New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString)\\n}\\n#endregion SQL Server functions \\n\\n#region SQL SSIS functions\\nFunction Get-Catalog {\\n    # define parameters\\n    Param ($CatalogName)\\n    \\n    # define working varaibles\\n    $Catalog = $null\\n    # check to see if there are any catalogs\\n    if ($integrationServices.Catalogs.Count -eq 0 -or -not $integrationServices.Catalogs[$CatalogName]) {\\n        throw \\\"SSIS Catalog not found $CatalogName\\\"\\n        # get reference to catalog\\n    }\\n\\n    $Catalog = $integrationServices.Catalogs[$CatalogName]\\n    \\n    # return the catalog\\n    return $Catalog\\n}\\n\\nFunction Get-Folder {\\n    # parameters\\n    Param($FolderName, $Catalog)\\n    \\n    $Folder = $null\\n    # try to get reference to folder\\n    \\n    if (!($null -eq $Catalog.Folders)) {\\n        $Folder = $Catalog.Folders[$FolderName]\\n    }\\n    \\n    # check to see if $Folder has a value\\n    if ($null -eq $Folder) {\\n        # display\\n        Write-Host \\\"Folder $FolderName doesn't exist, creating folder...\\\"\\n    \\n        # create the folder\\n        $Folder = New-Object \\\"$ISNamespace.CatalogFolder\\\" ($Catalog, $FolderName, $FolderName) \\n        $Folder.Create() \\n    }\\n    \\n    # return the folde reference\\n    return $Folder\\n}\\n\\nFunction Get-Environment {\\n    # define parameters\\n    Param($Folder, $EnvironmentName)\\n    \\n    $Environment = $null\\n    # get reference to Environment\\n    if (!($null -eq $Folder.Environments) -and $Folder.Environments.Count -gt 0) {\\n        $Environment = $Folder.Environments[$EnvironmentName]\\n    }\\n    \\n    # check to see if it's a null reference\\n    if ($null -eq $Environment) {\\n        # display\\n        Write-Host \\\"Environment $EnvironmentName doesn't exist, creating environment...\\\"\\n    \\n        # create environment\\n        $Environment = New-Object \\\"$ISNamespace.EnvironmentInfo\\\" ($Folder, $EnvironmentName, $EnvironmentName)\\n        $Environment.Create() \\n    }\\n    \\n    # return the environment\\n    return $Environment\\n}\\nFunction Set-PojectEnvironmentReference {\\n    # define parameters\\n    Param($Project, $Environment, $Folder)\\n    \\n    # get reference\\n    $Reference = $null\\n    \\n    if (!($null -eq $Project.References)) {\\n        $Reference = $Project.References[$Environment.Name, $Folder.Name]\\n    \\n    }\\n\\n    # check to see if it's a null reference\\n    if ($null -eq $Reference) {\\n        # display\\n        Write-Host \\\"Removeing old Project reference environment creating reference...\\\"\\n        foreach ( $Reference in  $Project.References) {\\n            $Project.References.Remove($Reference.Name, $Reference.EnvironmentFolderName)\\n        }\\n        Write-Host \\\"Project does not reference environment $($Environment.Name), creating reference...\\\"\\n        # create reference\\n        $Project.References.Add($Environment.Name, $Folder.Name)\\n        $Project.Alter() \\n    }\\n}\\n\\nFunction Add-EnvironmentVariable {\\n    # define parameters\\n    Param($Environment, $Parameter, $ParameterName, $EnvironmentValue )\\n    \\n    # display \\n    Write-Host \\\"- Adding environment variable $($ParameterName)\\\"\\n        \\n    # add variable with an initial value\\n    $Environment.Variables.Add($ParameterName, $Parameter.DataType, $EnvironmentValue, $Parameter.Sensitive, $Parameter.Description)\\n    $Parameter.Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, $ParameterName)\\n}\\n\\nFunction Remove-ReferencedValue {\\n    Param($Project\\n        , $ParameterName\\n    )\\n  \\n    if ($ParameterName -match \\\"\\\\|\\\") {\\n        $ParameterPath = $ParameterName.Split(\\\"|\\\")\\n        $Project.Packages[$ParameterPath[0]].Parameters[$ParameterPath[1]].Clear()\\n        $Project.Packages[$ParameterPath[0]].Alter()\\n    }\\n    else {\\n        $Project.Parameters[$ParameterName].Clear()  \\n    }\\n}\\n\\nFunction Sync-EnvironmentVariables {\\n    # define parameters\\n    Param($Environment\\n        , $Project\\n        , $ReferencedVariables\\n        , $OctopusParameters\\n        , $OctopusSSISParameterKey )\\n\\n    foreach ($VariableToEvaluate in $Environment.Variables) {\\n        $OctopusParameterKey = $OctopusSSISParameterKey -f $VariableToEvaluate.Name\\n`       if (-not $OctopusParameters.Keys.Contains($OctopusParameterKey)) {\\n            Write-Host \\\"- Removing environment variable: $($VariableToEvaluate.Name)\\\"    \\n            $Environment.Variables.Remove($VariableToEvaluate) | Out-Null\\n            if ($ReferencedVariables.Keys.Contains($VariableToEvaluate.Name)) {\\n                Remove-ReferencedValue -Project $Project -ParameterName $ReferencedVariables[$VariableToEvaluate.Name]\\n                $ReferencedVariables.Remove($VariableToEvaluate.Name)\\n            }\\n        }\\n    }\\n\\n    foreach ($ReferencedKeyName in $ReferencedVariables.Keys) {\\n`       if (-not $Environment.Variables.Contains($ReferencedKeyName)) {\\n            Write-Host \\\"- Project reference to environment variable: $($ReferencedKeyName)\\\"    \\n            Write-Host \\\"- Prodect referenace location $($ReferencedVariables[$ReferencedKeyName])\\\"\\n            Remove-ReferencedValue -Project $Project -ParameterName $ReferencedVariables[$ReferencedKeyName] \\n        }\\n    }\\n\\n    $Project.Alter()\\n    # alter the environment\\n    $Environment.Alter()\\n}\\n\\nFunction Set-ProjectParametersToEnvironmentVariablesReference {\\n    # define parameters\\n    Param($Project\\n        , $Environment\\n        , $OctopusParameters\\n        , $OctopusSSISParameterKey\\n    )\\n    \\n    $ReferencedVariables = @{ }\\n\\n    if ($null -eq $Project.Parameters) {\\n        Write-Host \\\"No project parameters exist\\\"\\n        return\\n    }\\n\\n    # loop through project parameters\\n    foreach ($Parameter in $Project.Parameters) {\\n        $OctopusParameterKey = $OctopusSSISParameterKey -f $Parameter.Name\\n        # Add variable to list of variable\\n        if ($OctopusParameters.Keys.Contains($OctopusParameterKey)) {\\n            Write-Host $(\\\"Updating Project / Environment {0} Parameter Value ...\\\" -f $Parameter.Name)\\n            $EnvironmentValue = $OctopusParameters[$OctopusParameterKey]\\n            $Variable = $null\\n            if (!($null -eq $Environment.Variables)) {\\n                # get reference to variable\\n                $Variable = $Environment.Variables[$Parameter.Name]\\n            }\\n            # check to see if variable exists\\n            if ($null -eq $Variable) {\\n                # add the environment variable\\n                Add-EnvironmentVariable -Environment $Environment -Parameter $Parameter -ParameterName $Parameter.Name -EnvironmentValue $EnvironmentValue            \\n            }\\n            else {\\n                $Variable.value = $EnvironmentValue\\n            }            \\n        }\\n        if ($Parameter.ValueType -eq [Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced) {\\n            $ReferencedVariables.Add($Parameter.ReferencedVariableName, $Parameter.Name)\\n        }\\n    }\\n    \\n    # alter the environment\\n    $Environment.Alter()\\n    $Project.Alter()\\n    return $ReferencedVariables\\n}\\n\\nFunction Set-PackageVariablesToEnvironmentVariablesReference {\\n    # define parameters\\n    Param($Project\\n        , $Environment        \\n        , $OctopusParameters\\n        , $OctopusSSISParameterKey)\\n\\n    $ReferencedVariables = @{ }\\n\\n    # loop through packages in project\\n    foreach ($Package in $Project.Packages) {\\n        # loop through parameters of package\\n        foreach ($Parameter in $Package.Parameters) {\\n            \\n            $ParameterName = $Parameter.ObjectName.Replace(\\\".dtsx\\\", \\\"\\\") + \\\".\\\" + $Parameter.Name\\n            $OctopusParameterKey = $OctopusSSISParameterKey -f $ParameterName\\n        \\n            # Add variable to list of variable\\n            if ($OctopusParameters.Keys.Contains($OctopusParameterKey)) {\\n                Write-Host $(\\\"Updating {0} Package / Environment {1} Parameter Value ...\\\" -f $Parameter.ObjectName, $ParameterName)\\n                $EnvironmentValue = $OctopusParameters[$OctopusParameterKey]\\n                $Variable = $null\\n                if (!($null -eq $Environment.Variables)) {\\n                    # get reference to variable\\n                    $Variable = $Environment.Variables[$ParameterName]\\n                }\\n                # check to see if the parameter exists\\n                if (!$Variable) {\\n                    # add the environment variable\\n                    Add-EnvironmentVariable -Environment $Environment -Parameter $Parameter -ParameterName $ParameterName -EnvironmentValue $EnvironmentValue\\n                }          \\n                else {\\n                    $Variable.value = $EnvironmentValue\\n                }            \\n            }\\n            if ($Parameter.ValueType -eq [Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced) {\\n                $ReferencedVariables.Add($Parameter.ReferencedVariableName, $(\\\"{0}|{1}\\\" -f $Package.Name, $Parameter.Name))\\n            }  \\n        }\\n    \\n        # alter the package\\n        $Package.Alter()\\n    }\\n    \\n    # alter the environment\\n    $Environment.Alter()\\n\\n    return $ReferencedVariables\\n}\\n\\n#endregion SQL SSIS functions\\n\\n#endregion Functions\\n\\n#region Script Main\\n\\n#region Get enviroment configured\\nif ((Get-SqlModuleInstalled -PowerShellModuleName \\\"SqlServer\\\") -ne $true) {\\n    # Display message\\n    Write-Output \\\"PowerShell module SqlServer not present, downloading temporary copy ...\\\"\\n    \\n    # Download and install temporary copy\\n    Install-SqlServerPowerShellModule -PowerShellModuleName \\\"SqlServer\\\" -LocalModulesPath $LocalModules\\n    \\n    # Dependent assemblies\\n    Get-SqlServerAssmblies    \\n}\\nelse {\\n    # Load the IntegrationServices Assembly\\n    [Reflection.Assembly]::LoadWithPartialName(\\\"Microsoft.SqlServer.Management.IntegrationServices\\\") | Out-Null # Out-Null supresses a message that would normally be displayed saying it loaded out of GAC\\n}\\n\\n# add snapins-- applies to sql server 2008 r2, newer version of SQL do not require this.\\nAdd-PSSnapin SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue\\nAdd-PSSnapin SqlServerProviderSnapin100 -ErrorAction SilentlyContinue\\n#endregion Get enviroment configured\\n\\n\\n$ISNamespace = \\\"Microsoft.SqlServer.Management.IntegrationServices\\\"\\n$OctopusSSISParameterKey = \\\"SSIS[{0}]\\\"\\n$DeployedPath = $OctopusParameters[\\\"Octopus.Action[$NugetPackageStepName].Output.Package.InstallationDirectoryPath\\\"]\\n\\nWrite-Host \\\"Connecting to server ...\\\"\\n\\nif ([string]::IsNullOrEmpty($sqlAccountUsername) -and [string]::IsNullOrEmpty($sqlAccountPassword)) {\\n    # Add username and password to connection string\\n    $sqlConnection = Get-ConnectionObject -SQLServerName $ServerName \\n}\\nelse {\\n    # Use integrated\\n    $sqlConnection = Get-ConnectionObject -SQLServerName $ServerName -UseSQLAuth -SQLLogin $sqlAccountUsername -Password=$sqlAccountPassword\\n}\\n\\n$integrationServices = New-Object \\\"$ISNamespace.IntegrationServices\\\" $sqlConnection\\n\\n\\n$IsPacFiles = Get-ChildItem -Recurse -Path $DeployedPath | Where-Object { $_.Extension.ToLower() -eq \\\".ispac\\\" }\\nWrite-Host \\\"$($IsPacFiles.Count) .ispac file(s) found.\\\"\\n\\n# get reference to the catalog\\nWrite-Host \\\"Getting reference to catalog $CatalogName\\\"\\n$Catalog = Get-Catalog -CatalogName $CatalogName\\n$Folder = Get-Folder -FolderName $FolderName -Catalog $Catalog\\n\\n$ReferencedVariables = @{ }\\nforeach ($IsPacFile in $IsPacFiles) {\\n    $ProjectFile = [System.IO.File]::ReadAllBytes($IsPacFile.FullName)\\n    $ProjectName = $IsPacFile.Name -replace $IsPacFile.Extension , \\\"\\\"\\n    $EnvironmentName = \\\"{0}_{1}\\\" -f $ProjectName , $EnvironmentTag\\n    # deploy project\\n    Write-Host \\\"Deploying project $($IsPacFile.Name)...\\\"\\n    $Folder.DeployProject($ProjectName, $ProjectFile) | Out-Null\\n\\n    # get reference to deployed project\\n    $Project = $Folder.Projects[$ProjectName]\\n    # get environment reference\\n    $Environment = Get-Environment -Folder $Folder -EnvironmentName $EnvironmentName \\n    Set-PojectEnvironmentReference -Project $Project -Environment $Environment -Folder $Folder \\n    Write-Host \\\"Referencing Project Parameters to Environment Variables...\\\"\\n    $ReferencedVariables += Set-ProjectParametersToEnvironmentVariablesReference -Project $Project -Environment $Environment -OctopusParameters $OctopusParameters -OctopusSSISParameterKey $OctopusSSISParameterKey\\n    Write-Host \\\"Referencing Project Parameters to Environment Variables...\\\"\\n    $ReferencedVariables += Set-PackageVariablesToEnvironmentVariablesReference -Project $Project -Environment $Environment -OctopusParameters $OctopusParameters -OctopusSSISParameterKey $OctopusSSISParameterKey\\n    Write-Host \\\"Sync package environment variables...\\\"\\n    Sync-EnvironmentVariables -Environment $Environment -Project $Project -ReferencedVariables $ReferencedVariables -OctopusParameters $OctopusParameters -OctopusSSISParameterKey $OctopusSSISParameterKey\\n}   \"\n+  },\n+  \"Parameters\": [\n+    {\n+      \"Id\": \"4d49a1f7-f7bf-40e2-b845-8c9c8e4deda9\",\n+      \"Name\": \"NugetPackageStepName\",\n+      \"Label\": \"NuGet package step\",\n+      \"HelpText\": \"The step that uploaded the NuGet package to the server.\",\n+      \"DefaultValue\": \"\",\n+      \"DisplaySettings\": {\n+        \"Octopus.ControlType\": \"StepName\"\n+      }\n+    },\n+    {\n+      \"Id\": \"6e97bd67-aeb5-4a92-b4d8-9e5b9a13ad93\",\n+      \"Name\": \"ServerName\",\n+      \"Label\": \"SSIS SQL Server Name\",\n+      \"HelpText\": \"The name of SSIS SQL Server \",\n+      \"DefaultValue\": \"\",\n+      \"DisplaySettings\": {\n+        \"Octopus.ControlType\": \"SingleLineText\"\n+      }\n+    },\n+    {\n+      \"Id\": \"6b0007eb-81eb-459f-b8c6-2f8c9465beb2\",\n+      \"Name\": \"CatalogName\",\n+      \"Label\": \"SSISDB Catlog Name\",\n+      \"HelpText\": \"The name of the SSISDB Catlog\",\n+      \"DefaultValue\": \"SSISDB\",\n+      \"DisplaySettings\": {\n+        \"Octopus.ControlType\": \"SingleLineText\"\n+      }\n+    },\n+    {\n+      \"Id\": \"00cadc4e-17bd-41bb-b4bd-87ca01b483eb\",\n+      \"Name\": \"FolderName\",\n+      \"Label\": \"SSIS Folder\",\n+      \"HelpText\": \"The SSIS folder to deploy to project to\",\n+      \"DefaultValue\": \"\",\n+      \"DisplaySettings\": {\n+        \"Octopus.ControlType\": \"SingleLineText\"\n+      }\n+    },\n+    {\n+      \"Id\": \"5e88fe40-d502-4e2e-8c96-c7ed8f2d82c4\",\n+      \"Name\": \"EnvironmentTag\",\n+      \"Label\": \"Environment Tag\",\n+      \"HelpText\": \"Environment Tag\",\n+      \"DefaultValue\": \"\",\n+      \"DisplaySettings\": {\n+        \"Octopus.ControlType\": \"SingleLineText\"\n+      }\n+    }\n+  ],\n+  \"LastModifiedBy\": \"Zogamorph\",\n+  \"$Meta\": {\n+    \"ExportedAt\": \"2019-09-20T12:45:06.360Z\",\n+    \"OctopusVersion\": \"2019.8.4\",\n+    \"Type\": \"ActionTemplate\"\n+  },\n+  \"Category\": \"sql\"\n+}"
  }
]
